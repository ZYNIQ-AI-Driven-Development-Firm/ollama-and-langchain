version: '3.8'

services:

  api:
    build:
      context: ./api
      dockerfile: Dockerfile.backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_DSN=postgresql+psycopg://app:pass@db:5432/llm
      - REDIS_URL=redis://redis:6379/0
      - OLLAMA_BASE_URL=http://ollama:11434
      - JWT_SECRET=supersecret
      - OAUTH_CLIENT_ID=
      - OAUTH_CLIENT_SECRET=
      - ADMIN_EMAIL=admin@example.com
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prom
    volumes:
      - ./api:/app
      - prom_data:/tmp/prom
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    networks:
      - internal

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - api
    networks:
      - internal

  ollama:
    build:
      context: .
      dockerfile: Dockerfile.ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    environment:
      - OLLAMA_MODELS=${OLLAMA_MODELS:-jimscard/whiterabbit-neo,thirty3/kali,qwen2.5-coder:7b,nomic-embed-text}
    networks:
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=llm
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d llm"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  prometheus:
    image: prom/prometheus:v2.47.2
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prom_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - internal

  grafana:
    image: grafana/grafana:10.2.0
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - internal

volumes:
  caddy_data:
  caddy_config:
  postgres_data:
  ollama_data:
  grafana_data:
  prom_data:

networks:
  internal:
    driver: bridge
